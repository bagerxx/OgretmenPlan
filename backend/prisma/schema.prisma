// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Kademeler (Okul seviyeleri: İlkokul, Ortaokul, Lise)
model Kademe {
  id        String   @id @default(cuid())
  ad        String   @unique
  aciklama  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  siniflar Sinif[]

  @@map("kademeler")
}

// Sınıflar (1-12 arası sınıf seviyeleri)
model Sinif {
  id      String @id @default(cuid())
  seviye  Int    // 1-12 arası
  kademe  Kademe @relation(fields: [kademeId], references: [id], onDelete: Cascade)
  kademeId String

  dersSaatleri    DersSaat[]
  planlar         Plan[]
  dersProgramlari DersProgrami[]

  @@unique([seviye, kademeId])
  @@map("siniflar")
}

// Dersler
model Ders {
  id        String   @id @default(cuid())
  ad        String   @unique
  aciklama  String?
  tip       DersTipi @default(KAZANIM_BAZLI) // KAZANIM_BAZLI veya BECERI_BAZLI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dersSaatleri    DersSaat[]
  kazanimlar      Kazanim[]
  beceriler       Beceri[]
  planlar         Plan[]
  dersProgramlari DersProgrami[]

  @@map("dersler")
}

enum DersTipi {
  KAZANIM_BAZLI
  BECERI_BAZLI
}

// Ders saatleri (her sınıf için farklı olabilir)
model DersSaat {
  id           String @id @default(cuid())
  haftalikSaat Int    // Haftalık ders saati
  ders         Ders   @relation(fields: [dersId], references: [id], onDelete: Cascade)
  dersId       String
  sinif        Sinif  @relation(fields: [sinifId], references: [id], onDelete: Cascade)
  sinifId      String

  @@unique([dersId, sinifId])
  @@map("ders_saatleri")
}

// Kazanımlar (eski müfredat)
model Kazanim {
  id        String   @id @default(cuid())
  kod       String   @unique
  icerik    String
  aciklama  String?
  ders      Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  dersId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  planKazanimlari PlanKazanim[]
  sinifDefteri    SinifDefteri[]

  @@map("kazanimlar")
}

// Temalar (yeni müfredat için)
model Tema {
  id        String   @id @default(cuid())
  ad        String   @unique
  aciklama  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  beceriler Beceri[]

  @@map("temalar")
}

// Beceriler (yeni müfredat, temalara bağlı)
model Beceri {
  id             String   @id @default(cuid())
  ad             String
  aciklama       String?
  toplamOgrenmeS Int      // Toplam öğrenme saati
  tema           Tema     @relation(fields: [temaId], references: [id], onDelete: Cascade)
  temaId         String
  ders           Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  dersId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  planBecerileri PlanBeceri[]
  sinifDefteri   SinifDefteri[]

  @@unique([ad, temaId, dersId])
  @@map("beceriler")
}

// Haftalar (eğitim yılı boyunca)
model Hafta {
  id         String      @id @default(cuid())
  numara     Int         // Hafta numarası (1-40 arası)
  baslangic  DateTime    // Hafta başlangıç tarihi
  bitis      DateTime    // Hafta bitiş tarihi
  durum      HaftaDurum  @default(LESSON)
  aciklama   String?     // Tatil adı, sınav türü vb.
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  planKazanimlari PlanKazanim[]
  planBecerileri  PlanBeceri[]
  sinifDefteri    SinifDefteri[]

  @@unique([numara])
  @@map("haftalar")
}

enum HaftaDurum {
  LESSON    // İş olan hafta (ders işlenen)
  HOLIDAY   // Tatil
  EXAM      // Sınav
  WORK      // İş/etkinlik haftası
}

// Ana plan tablosu
model Plan {
  id        String   @id @default(cuid())
  ad        String
  aciklama  String?
  egitiYili String   // "2024-2025"
  sinif     Sinif    @relation(fields: [sinifId], references: [id], onDelete: Cascade)
  sinifId   String
  ders      Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  dersId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  planKazanimlari PlanKazanim[]
  planBecerileri  PlanBeceri[]
  sinifDefteri    SinifDefteri[]

  @@unique([sinifId, dersId, egitiYili])
  @@map("planlar")
}

// Plan-kazanım ilişkisi (haftalık dağılım)
model PlanKazanim {
  id         String   @id @default(cuid())
  plan       Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId     String
  kazanim    Kazanim  @relation(fields: [kazanimId], references: [id], onDelete: Cascade)
  kazanimId  String
  hafta      Hafta    @relation(fields: [haftaId], references: [id], onDelete: Cascade)
  haftaId    String
  sure       Int      // Bu kazanıma ayrılan süre (saat)
  tamamlandi Boolean  @default(false)
  notlar     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([planId, kazanimId, haftaId])
  @@map("plan_kazanimlari")
}

// Plan-beceri ilişkisi (haftalık dağılım)
model PlanBeceri {
  id         String   @id @default(cuid())
  plan       Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId     String
  beceri     Beceri   @relation(fields: [beceriId], references: [id], onDelete: Cascade)
  beceriId   String
  hafta      Hafta    @relation(fields: [haftaId], references: [id], onDelete: Cascade)
  haftaId    String
  sure       Int      // Bu beceriye ayrılan süre (saat)
  tamamlandi Boolean  @default(false)
  notlar     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([planId, beceriId, haftaId])
  @@map("plan_becerileri")
}

// Sınıf Defteri (Haftalık program + kazanım eşleştirme)
model SinifDefteri {
  id        String @id @default(cuid())
  
  // Plan referansları
  plan      Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    String
  hafta     Hafta  @relation(fields: [haftaId], references: [id], onDelete: Cascade)
  haftaId   String
  
  // Program saati (hangi gün, hangi ders)
  dersProgrami   DersProgrami @relation(fields: [dersProgramiId], references: [id], onDelete: Cascade)
  dersProgramiId String
  
  // Kazanım/Beceri referansı (hangisi varsa)
  kazanim   Kazanim? @relation(fields: [kazanimId], references: [id], onDelete: Cascade)
  kazanimId String?
  beceri    Beceri?  @relation(fields: [beceriId], references: [id], onDelete: Cascade)
  beceriId  String?
  
  // Durum bilgileri
  tamamlandi Boolean @default(false)
  notlar     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  gunlukPlanlar GunlukPlan[]

  @@unique([planId, haftaId, dersProgramiId])
  @@map("sinif_defteri")
}

// Günlük Plan (O haftaki derslerin detaylı planı)
model GunlukPlan {
  id         String @id @default(cuid())
  
  sinifDefteri SinifDefteri @relation(fields: [sinifDefteriId], references: [id], onDelete: Cascade)
  sinifDefteriId String
  
  // Plan detayları
  konu       String  // Ana konu başlığı
  hedefler   String? // Dersin hedefleri
  yontemler  String? // Öğretim yöntemleri
  materyaller String? // Kullanılacak materyaller
  etkinlikler String? // Sınıf etkinlikleri
  degerlendirme String? // Değerlendirme yöntemi
  odev       String? // Ev ödevi
  
  // Durum
  tamamlandi Boolean @default(false)
  notlar     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("gunluk_planlar")
}

// Haftalık Ders Programı Şablonları (İlkokul, Ortaokul, Lise)
model DersProgramiSablonu {
  id          String           @id @default(cuid())
  ad          String           @unique // "İlkokul", "Ortaokul", "Lise"
  aciklama    String?
  maxDersSaat Int              // Günlük maksimum ders saati
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  dersProgramlari DersProgrami[]

  @@map("ders_programi_sablonlari")
}

// Günlük Ders Programı (Pazartesi-Cuma, 1-8 ders saati)
model DersProgrami {
  id        String    @id @default(cuid())
  gun       DersGunu  // PAZARTESI, SALI, vs.
  dersSaat  Int       // 1, 2, 3, 4, 5, 6, 7, 8
  sinif     Sinif     @relation(fields: [sinifId], references: [id], onDelete: Cascade)
  sinifId   String
  ders      Ders?     @relation(fields: [dersId], references: [id], onDelete: SetNull)
  dersId    String?
  sablon    DersProgramiSablonu @relation(fields: [sablonId], references: [id], onDelete: Cascade)
  sablonId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sinifDefterleri SinifDefteri[]

  @@unique([sinifId, sablonId, gun, dersSaat])
  @@map("ders_programlari")
}

enum DersGunu {
  PAZARTESI
  SALI
  CARSAMBA
  PERSEMBE
  CUMA
}
