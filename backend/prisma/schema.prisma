// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Sınıf seviyeleri (1. sınıf, 2. sınıf vb.)
model Sinif {
  id          String @id @default(cuid())
  seviye      Int    @unique // 1, 2, 3, 4, 5 (sınıf seviyeleri)
  aciklama    String // "1. Sınıf", "2. Sınıf" vb.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  dersler     Ders[]
  
  @@map("sinif")
}

// Dersler (her sınıf seviyesi için ayrı dersler)
model Ders {
  id              String  @id @default(cuid())
  ad              String  // "Matematik", "Türkçe" vb.
  haftalikSaat    Int     // Dersin haftalık saati
  sinifId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // İlişkiler
  sinif           Sinif    @relation(fields: [sinifId], references: [id], onDelete: Cascade)
  temalar         Tema[]
  planlar         Plan[]
  dersProgramlari DersProgrami[]
  sinifDefteriKayitlari SinifDefteriKayit[]
  planSablonlari  PlanSablonu[]
  
  @@unique([ad, sinifId]) // Aynı sınıfta aynı ders adı olamaz
  @@map("ders")
}

// Temalar (derslerin temel konuları)
model Tema {
  id          String @id @default(cuid())
  ad          String // "Sayılar", "Geometri" vb.
  sira        Int    // Tema sırası
  dersId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  ders        Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  beceriler   Beceri[]
  kazanimlar  Kazanim[]
  
  @@unique([dersId, sira])
  @@map("tema")
}

// Beceriler (her temanın altındaki beceriler - YENİ PROGRAM)
model Beceri {
  id          String @id @default(cuid())
  ad          String // Beceri adı
  saatSuresi  Int    // Bu becerinin tamamlanması için gereken saat
  sira        Int    // Beceri sırası
  temaId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  tema        Tema     @relation(fields: [temaId], references: [id], onDelete: Cascade)
  planDetaylari PlanDetay[]
  sinifDefteriKayitlari SinifDefteriKayit[]
  planSablonlari PlanSablonu[]
  
  @@unique([temaId, sira])
  @@map("beceri")
}

// Kazanımlar (her temanın altındaki kazanımlar - ESKİ PROGRAM)
model Kazanim {
  id          String @id @default(cuid())
  ad          String // Kazanım adı
  saatSuresi  Int    // Bu kazanımın tamamlanması için gereken saat
  sira        Int    // Kazanım sırası
  temaId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  tema        Tema     @relation(fields: [temaId], references: [id], onDelete: Cascade)
  planDetaylari PlanDetay[]
  sinifDefteriKayitlari SinifDefteriKayit[]
  planSablonlari PlanSablonu[]
  
  @@unique([temaId, sira])
  @@map("kazanim")
}

// Yıl tanımları
model Yil {
  id          String @id @default(cuid())
  yil         Int    @unique // 2025, 2026 vb.
  aciklama    String // "2025-2026 Eğitim Öğretim Yılı"
  baslamaTarihi DateTime
  bitisTarihi DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  haftalar    Hafta[]
  planlar     Plan[]
  planSablonlari PlanSablonu[]
  
  @@map("yil")
}

// Hafta aralıkları (her yıl için tanımlanır)
model Hafta {
  id          String @id @default(cuid())
  haftaNo     Int    // 1, 2, 3... (yıl içindeki hafta sırası)
  baslamaTarihi DateTime
  bitisTarihi DateTime
  tip         HaftaTipi @default(DERS) // DERS, TATIL, SINAV, SIB_NAV
  donem       DonemTipi // BIRINCI_DONEM, IKINCI_DONEM
  aciklama    String? // "1. Hafta", "Yarıyıl Tatili" vb.
  yilId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  yil         Yil      @relation(fields: [yilId], references: [id], onDelete: Cascade)
  planDetaylari PlanDetay[]
  planSablonlari PlanSablonu[]
  
  @@unique([yilId, haftaNo])
  @@map("hafta")
}

// Hafta tipleri
enum HaftaTipi {
  DERS     // Normal ders haftası
  TATIL    // Tatil haftası
  SINAV    // Sınav haftası
}

// Dönem tipleri
enum DonemTipi {
  BIRINCI_DONEM   // 1. Dönem
  IKINCI_DONEM    // 2. Dönem
}

// Ana plan tablosu (yıllık, haftalık, günlük planlar için)
model Plan {
  id          String @id @default(cuid())
  ad          String // Plan adı
  tip         PlanTipi // YILLIK, HAFTALIK, GUNLUK
  dersId      String
  yilId       String
  kullaniciId String? // Hangi kullanıcının planı (null ise genel şablon)
  aktif       Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  ders        Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  yil         Yil      @relation(fields: [yilId], references: [id], onDelete: Cascade)
  detaylar    PlanDetay[]
  
  @@map("plan")
}

// Plan tipleri
enum PlanTipi {
  YILLIK    // Yıllık plan
  HAFTALIK  // Haftalık plan  
  GUNLUK    // Günlük plan
}

// Plan şablonu - yıl başında hesaplanan dağıtım (ANA TABLO)
model PlanSablonu {
  id          String @id @default(cuid())
  dersId      String
  yilId       String
  programTipi ProgramTipi // YENI_PROGRAM, ESKI_PROGRAM
  beceriId    String? // Yeni program için beceri
  kazanimId   String? // Eski program için kazanım
  haftaId     String
  saat        Int    // Bu haftada bu beceri/kazanıma ayrılan saat
  sira        Int    // Bu beceri/kazanımın sırası
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  ders        Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  yil         Yil      @relation(fields: [yilId], references: [id], onDelete: Cascade)
  beceri      Beceri?  @relation(fields: [beceriId], references: [id], onDelete: Cascade)
  kazanim     Kazanim? @relation(fields: [kazanimId], references: [id], onDelete: Cascade)
  hafta       Hafta    @relation(fields: [haftaId], references: [id], onDelete: Cascade)
  
  @@unique([dersId, yilId, programTipi, beceriId, haftaId])
  @@unique([dersId, yilId, programTipi, kazanimId, haftaId])
  @@map("plan_sablonu")
}

// Program tipleri
enum ProgramTipi {
  YENI_PROGRAM  // Beceri bazlı
  ESKI_PROGRAM  // Kazanım bazlı
}

// Plan detayları (kullanıcıya özel planlar - şablondan kopyalanır)
model PlanDetay {
  id          String @id @default(cuid())
  planId      String
  beceriId    String? // Yeni program için beceri
  kazanimId   String? // Eski program için kazanım
  haftaId     String
  saat        Int    // Bu haftada bu beceri/kazanıma ayrılan saat
  tamamlandi  Boolean @default(false)
  notlar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  beceri      Beceri?  @relation(fields: [beceriId], references: [id], onDelete: Cascade)
  kazanim     Kazanim? @relation(fields: [kazanimId], references: [id], onDelete: Cascade)
  hafta       Hafta    @relation(fields: [haftaId], references: [id], onDelete: Cascade)
  
  @@unique([planId, beceriId, haftaId])
  @@unique([planId, kazanimId, haftaId])
  @@map("plan_detay")
}

// Günler (Pazartesi, Salı vb.)
model Gun {
  id          String @id @default(cuid())
  ad          String @unique // "Pazartesi", "Salı" vb.
  sira        Int    @unique // 1, 2, 3, 4, 5, 6, 7
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  dersProgramlari DersProgrami[]
  sinifDefteriKayitlari SinifDefteriKayit[]
  
  @@map("gun")
}

// Ders saatleri (1. saat, 2. saat vb.)
model DersSaati {
  id          String @id @default(cuid())
  saat        Int    @unique // 1, 2, 3, 4, 5, 6, 7, 8
  baslamaSaati String // "08:00"
  bitisSaati  String // "08:40"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  dersProgramlari DersProgrami[]
  sinifDefteriKayitlari SinifDefteriKayit[]
  
  @@map("ders_saati")
}

// Kullanıcının ders programı (hangi gün hangi saatte hangi dersi yapıyor)
model DersProgrami {
  id          String @id @default(cuid())
  kullaniciId String // Öğretmenin ID'si
  dersId      String
  gunId       String
  dersSaatiId String
  aktif       Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  ders        Ders     @relation(fields: [dersId], references: [id], onDelete: Cascade)
  gun         Gun      @relation(fields: [gunId], references: [id], onDelete: Cascade)
  dersSaati   DersSaati @relation(fields: [dersSaatiId], references: [id], onDelete: Cascade)
  
  @@unique([kullaniciId, gunId, dersSaatiId]) // Aynı kişi aynı gün aynı saatte birden fazla ders veremez
  @@map("ders_programi")
}

// Sınıf defteri kayıtları
model SinifDefteriKayit {
  id          String @id @default(cuid())
  kullaniciId String // Öğretmenin ID'si
  dersId      String
  gunId       String
  dersSaatiId String
  beceriId    String? // Yeni program - hangi beceri işlendiği (opsiyonel)
  kazanimId   String? // Eski program - hangi kazanım işlendiği (opsiyonel)
  konu        String  // İşlenen konu
  aciklama    String? // Ek açıklamalar
  tarih       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  ders        Ders      @relation(fields: [dersId], references: [id], onDelete: Cascade)
  gun         Gun       @relation(fields: [gunId], references: [id], onDelete: Cascade)
  dersSaati   DersSaati @relation(fields: [dersSaatiId], references: [id], onDelete: Cascade)
  beceri      Beceri?   @relation(fields: [beceriId], references: [id], onDelete: SetNull)
  kazanim     Kazanim?  @relation(fields: [kazanimId], references: [id], onDelete: SetNull)
  
  @@unique([kullaniciId, dersId, gunId, dersSaatiId, tarih])
  @@map("sinif_defteri_kayit")
}
